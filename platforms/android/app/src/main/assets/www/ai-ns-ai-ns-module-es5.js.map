{"version":3,"sources":["webpack:///src/app/ai-ns/ai-ns.page.html","webpack:///src/app/ai-ns/ai-ns-routing.module.ts","webpack:///src/app/ai-ns/ai-ns.module.ts","webpack:///src/app/ai-ns/ai-ns.page.scss","webpack:///src/app/ai-ns/ai-ns.page.ts","webpack:///src/app/model/calve-registration.ts"],"names":["routes","path","component","AiNsPageRoutingModule","imports","forChild","exports","AiNsPageModule","declarations","AiNsPage","apiService","storage","router","alertCtrl","geolocation","nativeGeocoder","pipe","segment","segment1","ownerdetails","animadetails","pedigreeinformation","HideAiDetails","showAiDetails","showNsdetails","statusSave","statusUpdate","normal","assist","birth","abortion","showCalfRegeistration","animalTagNumber","p_technique","N_TechniqueType","pdStatus","ai","ns","geoencoderOptions","useLocale","maxResults","modelAiNs","model","claveModel","getBreedType","optionsForSelect","getExoticBloodPercent","getUserLocationWhileLoggingIn","p_dateOfAi","currentDate","transform","Date","now","errorMessage","event","charCode","which","keyCode","preventDefault","fetchFarmerOrFarmNameAnimalPedigreeDetailsFromTagNumber","currentUser","sessionStorage","getItem","console","log","getUserLocation","subscribe","response","i","length","userName","gewog","user_location_name","gewogId","user_location_id","getAllVillagesList","semenTypeList","technicianTypeList","breedingStatusList","pdStatusList","eventTypeList","assistedTypeList","cid_number","nlhd_Number","owner_name","farmOrFarmerName","owner_village","village","owner_gewog","owner_dzongkhag","dzongkhag","mobile_number","mobileNumber","animalname","animalName","animalAge","sex","animalSex","category","animalCategory","CHBPP","chbpp","migration","migrationRegion","bcs","housing_type_option","housingType","damNumber","damName","damExotic","damBreed","damBreedJoin","breedType","sireNumber","sireName","sireExotic","sireBreed","sireBreedJoin","selfExotic","exotic_Blood_Percent","selfBreedType","selfBreedId","breedId","getArtificialInseminationDetailsById","getAnimalBreedingStatus","getAmimalBreedingStatus","animal_Tag_Number","pd_Status","breedingStatus","breeding_Status","pdStausdate","pd_Status_Date","getArtificialInseminationDetails","technique_Name","semenType","semen_Type","dateOfAi","date_Of_Event","bullNumber","bull_Number","bullName","bull_Name","bullExotic","bull_Exotic","bullType","breed","bullTypeId","technicianName","technician_Name","aiCenter","aicenter","ai_Center_Desc","technicianType","ai_Technician_Type","longitude","latitude","altitude","set","navigate","failedAlert","updateBreedingStatus","alertBreedingStatusSuccess","exoticList","breedTypeList","getVillageListFromGewogLookup","villageList","villageJoin","aiCenterDesc","aiCenterJoin","aiCenterId","ai_Center_Id","getCurrentPosition","then","position","geoLatitude","coords","geoLongitude","geoAltitude","getGeoencoder","reverseGeocode","result","address","generateAddress","error","JSON","stringify","addressObj","obj","key","push","reverse","val","slice","p_semenType","p_technicianType","p_bullNumber","p_bullName","p_bullExotic","bull_Breed_Type_Id","P_bullTypeId","p_technicianName","user_Gewog_Id","p_altitude","saveAiAndNSTypeBreeding","alertSaveSuccesss","alerFailed","N_Date","N_BullNumber","N_BullName","N_BullExotic","N_BullTypeId","$event","item","detail","value","eventType","eventUpdate","evntUpdateSuccesss","calf_exotic","animalRegistrationNumber","clave_registration_no","calve_name","birthdate","calf_birth_date","calve_age","calve_sex","damBreedId","sireBreedId","animalBreedType","calf_breed_type","animalExotic","registerCalveDetails","successmessage","alerSuccessful","create","header","message","buttons","text","alert","present","onDidDismiss","clear","selector","template","CalveRegistration"],"mappings":"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","file":"ai-ns-ai-ns-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"success\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button style=\\\"color: white;\\\" slot=\\\"start\\\"></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>AI/NS</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-icon (click)=\\\"logout()\\\" class=\\\"icon-size\\\" name=\\\"log-in-outline\\\"></ion-icon>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-card-content>\\n      <ion-label id=\\\"lb\\\">Registration For AI/NS And Calving</ion-label>\\n      <ion-list class=\\\"line-input\\\">\\n        <ion-item>\\n          <ion-label position=\\\"floating\\\">Enter Tag No and press ENTER*: </ion-label>\\n          <ion-input type=\\\"text\\\" [(ngModel)]=\\\"animalTagNumber\\\" numbersOnly\\n            maxlength=\\\"10\\\" (keypress)=\\\"keyPressNumbers($event)\\\" class=\\\"ion-text-right\\\">\\n          </ion-input>\\n        </ion-item>\\n      </ion-list>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-label id=\\\"lb\\\">Details of </ion-label>\\n      <ion-segment (ionChange)=\\\"segmentChanged($event)\\\" [(ngModel)]=\\\"segment\\\" color=\\\"success\\\">\\n        <ion-segment-button value=\\\"0\\\">\\n          <ion-label>Farmer</ion-label>\\n        </ion-segment-button>\\n        <ion-segment-button value=\\\"1\\\">\\n          <ion-label>Animals</ion-label>\\n        </ion-segment-button>\\n        <ion-segment-button value=\\\"2\\\">\\n          <ion-label>Pedigree</ion-label>\\n        </ion-segment-button>\\n      </ion-segment>\\n    </ion-card-header>\\n\\n    <!-- Get farmers detais -->\\n    <ion-card-content *ngIf=\\\"ownerdetails\\\">\\n      <ion-list class=\\\"line-input\\\">\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Farmer's name: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"owner_name\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Village: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"owner_village\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Gewog: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"owner_gewog\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Dzongkhag: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"owner_dzongkhag\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Mobile No: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"mobile_number\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n      </ion-list>\\n    </ion-card-content>\\n\\n    <!-- get animal details -->\\n    <ion-card-content *ngIf=\\\"animadetails\\\">\\n      <ion-list class=\\\"line-input\\\">\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Animal name: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"animalname\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Age: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"animalAge\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Sex: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"sex\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Category: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"category\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">CHBPP: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"CHBPP\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Migration: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"migration\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Migration Region: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"migrationRegion\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">BCS: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"bcs\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Housing Type: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"housing_type_option\\\" class=\\\"ion-text-right\\\">\\n          </ion-input>\\n        </ion-item><br>\\n\\n      </ion-list>\\n    </ion-card-content>\\n\\n    <!-- get pedigree information -->\\n    <ion-card-content *ngIf=\\\"pedigreeinformation\\\">\\n      <ion-list class=\\\"line-input\\\">\\n        <ion-item>\\n          <ion-label position=\\\"fixed \\\" class=\\\"ion-text-wrap\\\">DAM No: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"damNumber\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">DAM Name: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"damName\\\" class=\\\"ion-text-right\\\">{{damName}}</ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">DAM Exotic: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"damExotic\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">DAM Breed: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"damBreed\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Sire No: </ion-label>\\n          <ion-input [(ngModel)]=\\\"sireNumber\\\" (keypress)=\\\"keyPressNumbers($event)\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Sire Name: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"sireName\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Sire Exotic: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"sireExotic\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Sire Breed: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"sireBreed\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Exotic: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"selfExotic\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n        <ion-item>\\n          <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Breed: </ion-label>\\n          <ion-input readonly [(ngModel)]=\\\"selfBreedType\\\" class=\\\"ion-text-right\\\"></ion-input>\\n        </ion-item><br>\\n\\n      </ion-list>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <!-- if the ai and ns is already done with given tagnumber just update -->\\n  <div *ngIf=\\\"showAiDetails\\\">\\n    <!-- Details of animal breeding -->\\n    <ion-card>\\n\\n      <!-- Ai type breeding for animals -->\\n      <ion-card-header>\\n        <ion-label id=\\\"lb\\\">Details of AI Breeding</ion-label>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <ion-list class=\\\"line-input\\\">\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Semen type: </ion-label>\\n            <ion-input [(ngModel)]=\\\"semenType\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Date of AI: </ion-label>\\n            <ion-input [(ngModel)]=\\\"dateOfAi\\\" displayFormat=\\\"DD-MM-YYYY\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Sire Number*: </ion-label>\\n            <ion-input [(ngModel)]=\\\"bullNumber\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Bull Name*: </ion-label>\\n            <ion-input [(ngModel)]=\\\"bullName\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Sire Exotic*: </ion-label>\\n            <ion-input [(ngModel)]=\\\"bullExotic\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Breed type*: </ion-label>\\n            <ion-input [(ngModel)]=\\\"bullType\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Technician Name: </ion-label>\\n            <ion-input [(ngModel)]=\\\"technicianName\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">AI Center: </ion-label>\\n            <ion-input [(ngModel)]=\\\"aiCenter\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">AI Technician Type: </ion-label>\\n            <ion-input [(ngModel)]=\\\"technicianType\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Latitude: </ion-label>\\n            <ion-input [(ngModel)]=\\\"latitude\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Longitude: </ion-label>\\n            <ion-input [(ngModel)]=\\\"longitude\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Altitude: </ion-label>\\n            <ion-input [(ngModel)]=\\\"altitude\\\" readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <!-- <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">No of AI done: </ion-label>\\n            <ion-input readonly class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br> -->\\n\\n          <ion-button color=\\\"success\\\" shape=\\\"round\\\" (click)=\\\"updateAi()\\\">Update Details</ion-button>\\n\\n        </ion-list>\\n      </ion-card-content>\\n    </ion-card>\\n  </div>\\n\\n  <!-- if the ai and ns is not done hide animal ai details -->\\n  <div *ngIf=\\\"HideAiDetails\\\">\\n    <ion-card>\\n      <ion-card-header>\\n        <ion-label id=\\\"lb\\\">Select Breeding Type</ion-label>\\n        <ion-segment (ionChange)=\\\"segmentChangedBreedingMethod($event)\\\" [(ngModel)]=\\\"segment1\\\" color=\\\"success\\\">\\n          <ion-segment-button value=\\\"0\\\">\\n            <ion-label>AI</ion-label>\\n          </ion-segment-button>\\n          <ion-segment-button value=\\\"1\\\">\\n            <ion-label>NS</ion-label>\\n          </ion-segment-button>\\n        </ion-segment>\\n      </ion-card-header>\\n\\n      <!-- Ai breeding type for animals -->\\n      <ion-card-content *ngIf=\\\"ai\\\">\\n        <ion-list class=\\\"line-input\\\">\\n          <ion-item>\\n            <ion-label class=\\\"ion-text-wrap\\\">Semen type:* </ion-label>\\n            <ion-select [(ngModel)]=\\\"p_semenType\\\" class=\\\"owner-type\\\" placeholder=\\\"Semen type\\\">\\n              <ion-select-option *ngFor=\\\"let item of semenTypeList\\\" value=\\\"{{item}}\\\"> {{item}}\\n              </ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"stack\\\" class=\\\"ion-text-wrap\\\">Date of AI*: </ion-label>\\n            <ion-input [(ngModel)]=\\\"p_dateOfAi\\\" (ionChange)=\\\"showValidDate(p_dateOfAi)\\\" displayFormat=\\\"DD-MM-YYYY\\\" type=\\\"date\\\" class=\\\"ion-text-right\\\">\\n            </ion-input>\\n          </ion-item><br>\\n          <p style=\\\"color: red;\\\">{{errorMessage}}</p>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" class=\\\"ion-text-wrap\\\">Sire Number*: </ion-label>\\n            <ion-input [(ngModel)]=\\\"p_bullNumber\\\" (keypress)=\\\"keyPressNumbers($event)\\\"  maxlength=\\\"10\\\" class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" class=\\\"ion-text-wrap\\\">Sire Name*: </ion-label>\\n            <ion-input type=\\\"text\\\" [(ngModel)]=\\\"p_bullName\\\" class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label class=\\\"ion-text-wrap\\\">Sire Exotic %*: </ion-label>\\n            <ion-select [(ngModel)]=\\\"p_bullExotic\\\" class=\\\"owner-type\\\" placeholder=\\\"Blood %\\\">\\n              <ion-select-option *ngFor=\\\"let se of exoticList;\\\" value=\\\"{{se.exoticBlood}}\\\">{{se.exoticBlood}}\\n              </ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label class=\\\"ion-text-wrap\\\">Sire Breed*: </ion-label>\\n            <ion-select [(ngModel)]=\\\"P_bullTypeId\\\" class=\\\"owner-type\\\" placeholder=\\\"Breed Type\\\">\\n              <ion-select-option *ngFor=\\\"let bT of breedTypeList;\\\" value=\\\"{{bT.breedId}}\\\">{{bT.breedType}}\\n              </ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" class=\\\"ion-text-wrap\\\">Technician Name*: </ion-label>\\n            <ion-input [(ngModel)]=\\\"p_technicianName\\\" class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">AI Center: </ion-label>\\n            <ion-input readonly class=\\\"ion-text-right\\\">{{aiCenterDesc}}</ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label class=\\\"ion-text-wrap\\\">AI Technician Type:</ion-label>\\n            <ion-select [(ngModel)]=\\\"p_technicianType\\\" class=\\\"owner-type\\\" placeholder=\\\"Technician Type\\\">\\n              <ion-select-option *ngFor=\\\"let tech of technicianTypeList;\\\" value=\\\"{{tech}}\\\">{{tech}}\\n              </ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Gewog*: </ion-label>\\n            <ion-input [(ngModel)]=\\\"p_gewog\\\" readonly class=\\\"ion-text-right\\\">{{gewog}}</ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label class=\\\"ion-text-wrap\\\">Village*:</ion-label>\\n            <ion-select [(ngModel)]=\\\"p_village\\\" (ionChange)=\\\"getGeoLocation()\\\" class=\\\"owner-type\\\"\\n              placeholder=\\\"Villages\\\">\\n              <ion-select-option *ngFor=\\\"let vl of villageList;\\\" value=\\\"{{vl.village_Serial_No}}\\\">{{vl.village_Name}}\\n              </ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Latitude: </ion-label>\\n            <ion-input readonly class=\\\"ion-text-right\\\">{{geoLatitude}}</ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Longitude: </ion-label>\\n            <ion-input readonly class=\\\"ion-text-right\\\">{{geoLongitude}}</ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Altitude: </ion-label>\\n            <ion-input [(ngModel)]=\\\"p_altitude\\\" class=\\\"ion-text-right\\\"> </ion-input>\\n          </ion-item><br>\\n\\n          <ion-button color=\\\"success\\\" shape=\\\"round\\\" (click)=\\\"saveAiTypeBreeding()\\\">Save Details</ion-button>\\n\\n        </ion-list>\\n      </ion-card-content>\\n\\n      <!-- NS type breeding for animals -->\\n      <ion-card-content *ngIf=\\\"ns\\\">\\n        <ion-list class=\\\"line-input\\\">\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" class=\\\"ion-text-wrap\\\">Date of NS: </ion-label>\\n            <ion-input [(ngModel)]=\\\"N_Date\\\" displayFormat=\\\"DD-MM-YYYY\\\" type=\\\"date\\\" class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" class=\\\"ion-text-wrap\\\">Bull Number: </ion-label>\\n            <ion-input type=\\\"fixed\\\" numbersOnly maxlength=\\\"10\\\" [(ngModel)]=\\\"N_BullNumber\\\" class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" class=\\\"ion-text-wrap\\\">Bull Name: </ion-label>\\n            <ion-input type=\\\"fixed\\\" [(ngModel)]=\\\"N_BullName\\\" class=\\\"ion-text-right\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label class=\\\"ion-text-wrap\\\">Bull Exotic %</ion-label>\\n            <ion-select [(ngModel)]=\\\"N_BullExotic\\\" class=\\\"owner-type\\\" placeholder=\\\"Blood %\\\">\\n              <ion-select-option *ngFor=\\\"let se of exoticList;\\\" value=\\\"{{se.exoticBlood}}\\\">{{se.exoticBlood}}\\n              </ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label class=\\\"ion-text-wrap\\\">Bull Breed</ion-label>\\n            <ion-select [(ngModel)]=\\\"N_BullTypeId\\\" class=\\\"owner-type\\\" placeholder=\\\"Breed Type\\\">\\n              <ion-select-option *ngFor=\\\"let bT of breedTypeList;\\\" value=\\\"{{bT.breedId}}\\\">{{bT.breedType}}\\n              </ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <ion-button color=\\\"success\\\" shape=\\\"round\\\" (click)=\\\"saveNsTypeBreeding()\\\">Save Details</ion-button>\\n        </ion-list>\\n      </ion-card-content>\\n    </ion-card>\\n  </div>\\n\\n  <div *ngIf=\\\"showNsdetails\\\">\\n    <ion-card>\\n      <ion-card-header>\\n        <ion-label id=\\\"lb\\\">Details of NS Breeding</ion-label>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <ion-list class=\\\"line-input\\\">\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Bull Number: </ion-label>\\n            <ion-input readonly>{{bullNumber}}</ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Bull Name: </ion-label>\\n            <ion-input readonly class=\\\"ion-text-right\\\">{{bullName}}</ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Bull Exotic: </ion-label>\\n            <ion-input readonly class=\\\"ion-text-right\\\">{{bullExotic}}</ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Bull Breed: </ion-label>\\n            <ion-input readonly class=\\\"ion-text-right\\\">{{bullType}}</ion-input>\\n          </ion-item><br>\\n\\n        </ion-list>\\n      </ion-card-content>\\n    </ion-card>\\n  </div>\\n\\n  <!-- Status Save -->\\n  <div *ngIf=\\\"statusSave\\\">\\n    <ion-card>\\n      <ion-card-header>\\n        <ion-label id=\\\"lb\\\">Update Status</ion-label>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <ion-list class=\\\"line-input\\\">\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" class=\\\"ion-text-wrap\\\">Breeding Status*: </ion-label>\\n            <ion-select [(ngModel)]=\\\"model.breeding_Status\\\" class=\\\"owner-type\\\" placeholder=\\\"Status\\\">\\n              <ion-select-option *ngFor=\\\"let item of breedingStatusList\\\" value=\\\"{{item}}\\\">{{item}}</ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" class=\\\"ion-text-wrap\\\">PD Status*: </ion-label>\\n            <ion-select [(ngModel)]=\\\"model.pd_Status\\\" class=\\\"owner-type\\\" placeholder=\\\"Status\\\">\\n              <ion-select-option *ngFor=\\\"let item of pdStatusList\\\" value=\\\"{{item}}\\\">{{item}}</ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label class=\\\"ion-text-wrap\\\">Date*: </ion-label>\\n            <ion-input [(ngModel)]=\\\"model.pd_Status_Date\\\" displayFormat=\\\"DD-MM-YYYY\\\" type=\\\"date\\\">\\n            </ion-input>\\n          </ion-item><br>\\n\\n          <ion-button color=\\\"success\\\" (click)=\\\"updateBreedingStatusWhenPdstausIsNull()\\\" shape=\\\"round\\\">Update Status\\n          </ion-button>\\n          <!-- <ion-button color=\\\"danger\\\" shape=\\\"round\\\">Exit</ion-button> -->\\n\\n        </ion-list>\\n      </ion-card-content>\\n    </ion-card>\\n  </div>\\n\\n  <!-- Update status -->\\n  <div *ngIf=\\\"statusUpdate\\\">\\n    <ion-card>\\n      <ion-card-header>\\n        <ion-label id=\\\"lb\\\">Status Details</ion-label>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <ion-list class=\\\"line-input\\\">\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Breeding Status: </ion-label>\\n            <ion-input readonly class=\\\"ion-text-right\\\">{{breedingStatus}}</ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">PD Status: </ion-label>\\n            <ion-input readonly class=\\\"ion-text-right\\\">{{pdStatus}}</ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Date: </ion-label>\\n            <ion-input readonly class=\\\"ion-text-right\\\">{{pdStausdate}}</ion-input>\\n          </ion-item><br>\\n\\n        </ion-list>\\n\\n        <ion-button color=\\\"success\\\" shape=\\\"round\\\" (click)=\\\"breedinStatusUpdate()\\\">Update</ion-button>\\n\\n      </ion-card-content>\\n    </ion-card>\\n  </div>\\n\\n  <!-- //Event update -->\\n  <div>\\n    <ion-card>\\n      <ion-card-header>\\n        <ion-label id=\\\"lb\\\">Event Type</ion-label>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <ion-list class=\\\"line-input\\\">\\n\\n          <!-- Selecting event type from list -->\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Event Type*: </ion-label>\\n            <ion-select class=\\\"owner-type\\\" [(ngModel)]=\\\"modelAiNs.type_Of_Event\\\" (ionChange)=\\\"eventType($event)\\\"\\n              placeholder=\\\"Event type\\\">\\n              <ion-select-option *ngFor=\\\"let item of eventTypeList\\\" value=\\\"{{item}}\\\">{{item}}</ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <!-- normal event for animals -->\\n          <div *ngIf=\\\"normal\\\">\\n            <ion-item>\\n              <ion-label class=\\\"ion-text-wrap\\\">Date*: </ion-label>\\n              <ion-input [(ngModel)]=\\\"modelAiNs.date_Of_Pd_Status\\\"  displayFormat=\\\"DD-MM-YYYY\\\" type=\\\"date\\\">\\n              </ion-input>\\n            </ion-item><br>\\n\\n            <ion-button color=\\\"success\\\" shape=\\\"round\\\" (click)=\\\"updateEvent(modelAiNs.type_Of_Event)\\\">Save Details\\n            </ion-button>\\n          </div>\\n\\n          <!-- assiste event for animals -->\\n          <div *ngIf=\\\"assist\\\">\\n            <ion-item>\\n              <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Assist Type*: </ion-label>\\n              <ion-select [(ngModel)]=\\\"modelAiNs.type_Of_Assited_Formula\\\" class=\\\"owner-type\\\" placeholder=\\\"Assist type\\\">\\n                <ion-select-option *ngFor=\\\"let item of assistedTypeList\\\" value=\\\"{{item}}\\\">{{item}}</ion-select-option>\\n              </ion-select>\\n            </ion-item><br>\\n\\n            <ion-item>\\n              <ion-label class=\\\"ion-text-wrap\\\">Date*: </ion-label>\\n              <ion-input [(ngModel)]=\\\"modelAiNs.date_Of_Pd_Status\\\" displayFormat=\\\"DD-MM-YYYY\\\" type=\\\"date\\\">\\n              </ion-input>\\n            </ion-item><br>\\n\\n            <ion-button color=\\\"success\\\" shape=\\\"round\\\" (click)=\\\"updateEvent(modelAiNs.type_Of_Event)\\\">Save Details\\n            </ion-button>\\n\\n          </div>\\n          <!-- still on birth even for animals -->\\n          <div *ngIf=\\\"birth\\\">\\n            <ion-item>\\n              <ion-label class=\\\"ion-text-wrap\\\">Date*: </ion-label>\\n              <ion-input [(ngModel)]=\\\"modelAiNs.date_Of_Pd_Status\\\" displayFormat=\\\"DD-MM-YYYY\\\" type=\\\"date\\\">\\n              </ion-input>\\n            </ion-item><br>\\n\\n            <ion-button color=\\\"success\\\" shape=\\\"round\\\" (click)=\\\"updateEvent(modelAiNs.type_Of_Event)\\\">Save Details\\n            </ion-button>\\n          </div>\\n\\n          <!-- abortion event for animals -->\\n          <div *ngIf=\\\"abortion\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\" class=\\\"ion-text-wrap\\\">Reason for Death*: </ion-label>\\n              <ion-input [(ngModel)]=\\\"modelAiNs.remarks\\\" type=\\\"text\\\">\\n              </ion-input>\\n            </ion-item><br>\\n\\n            <ion-item>\\n              <ion-label class=\\\"ion-text-wrap\\\">Date*: </ion-label>\\n              <ion-input [(ngModel)]=\\\"modelAiNs.date_Of_Pd_Status\\\" displayFormat=\\\"DD-MM-YYYY\\\" type=\\\"date\\\">\\n              </ion-input>\\n            </ion-item><br>\\n\\n            <ion-button color=\\\"success\\\" shape=\\\"round\\\" (click)=\\\"updateEvent(modelAiNs.type_Of_Event)\\\">Save Details\\n            </ion-button>\\n          </div>\\n\\n        </ion-list>\\n      </ion-card-content>\\n    </ion-card>\\n  </div>\\n\\n  <!-- show calf regestration for normal and assit type even -->\\n  <div *ngIf=\\\"showCalfRegeistration\\\">\\n    <ion-card>\\n      <ion-card-header>\\n        <ion-label id=\\\"lb\\\">Calve registration</ion-label>\\n      </ion-card-header>\\n\\n      <ion-card-content>\\n        <ion-list class=\\\"line-input\\\">\\n\\n          <ion-item>\\n            <ion-label class=\\\"ion-text-wrap\\\">Date of Calving: </ion-label>\\n            <ion-input [(ngMoodel)]=\\\"calf_birth_date\\\" displayFormat=\\\"DD-MM-YYYY\\\" type=\\\"date\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Sex*: </ion-label>\\n            <ion-select class=\\\"owner-type\\\" placeholder=\\\"Assist type\\\" [(ngMoodel)]=\\\"calve_sex\\\">\\n              <ion-select-option value=\\\"male\\\">Male</ion-select-option>\\n              <ion-select-option value=\\\"female\\\">Female</ion-select-option>\\n            </ion-select>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" class=\\\"ion-text-wrap\\\">CalveRegistration No:* </ion-label>\\n            <ion-input [(ngModel)]=\\\"clave_registration_no\\\"></ion-input>\\n          </ion-item><br>\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Exotic:* </ion-label>\\n            <ion-input [(ngModel)]=\\\"calf_exotic\\\" readonly></ion-input>\\n          </ion-item><br>\\n\\n\\n          <ion-item>\\n            <ion-label position=\\\"fixed\\\" class=\\\"ion-text-wrap\\\">Breed Type*: </ion-label>\\n            <ion-select [(ngModel)]=\\\"calf_breed_type\\\" class=\\\"owner-type\\\" placeholder=\\\"breed type\\\">\\n              <ion-select-option *ngFor=\\\"let c of breedTypeList;\\\" value=\\\"{{c.breedId}}\\\">{{c.breedType}}\\n              </ion-select-option>\\n\\n            </ion-select>\\n          </ion-item><br>\\n\\n        </ion-list>\\n        <ion-button color=\\\"success\\\" shape=\\\"round\\\" (click)=\\\"registerCalveDetails()\\\">Save Details\\n        </ion-button>\\n      </ion-card-content>\\n    </ion-card>\\n  </div>\\n\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AiNsPage } from './ai-ns.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AiNsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AiNsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AiNsPageRoutingModule } from './ai-ns-routing.module';\n\nimport { AiNsPage } from './ai-ns.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    AiNsPageRoutingModule\n  ],\n  declarations: [AiNsPage]\n})\nexport class AiNsPageModule {}\n","export default \"ion-title {\\n  font-size: 15px;\\n}\\n\\nion-toolbar {\\n  background-color: whitesmoke;\\n}\\n\\nion-content {\\n  background-color: whitesmoke;\\n  --offset-bottom: auto!important;\\n  --overflow: hidden;\\n  overflow: auto;\\n}\\n\\nion-content::-webkit-scrollbar {\\n  display: none;\\n}\\n\\n.line-input {\\n  margin-bottom: 0 !important;\\n}\\n\\n.line-input ion-item {\\n  --border-color: transparent!important;\\n  --highlight-height: 0;\\n  border: 1px solid #dedede;\\n  border-radius: 4px;\\n}\\n\\n.line-input ion-item.item-has-focus {\\n  border: 1px solid greenyellow;\\n}\\n\\n.line-input ion-item ion-label {\\n  color: black !important;\\n  font-weight: 300;\\n  font-size: 12px !important;\\n}\\n\\nion-input {\\n  font-size: 12px !important;\\n}\\n\\nion-label {\\n  font-weight: bold;\\n}\\n\\nion-card-subtitle {\\n  text-align: center;\\n}\\n\\nion-item {\\n  height: 55px;\\n}\\n\\nion-label#farm-type {\\n  font-size: 13px !important;\\n}\\n\\nion-label {\\n  font-size: 9px;\\n}\\n\\nion-select.owner-type {\\n  font-size: 13px;\\n}\\n\\nion-label#lb {\\n  font-size: 12px !important;\\n}\\n\\n.icon-size {\\n  height: 25px;\\n  width: 25px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYWktbnMvRDpcXE9GRklDRVxcUFJPSkVDVFxcRE9MX0RhaXJ5TW9iaWxlQXBwXFxkb2wtZGFpcnktYXBwLW1hc3Rlci9zcmNcXGFwcFxcYWktbnNcXGFpLW5zLnBhZ2Uuc2NzcyIsInNyYy9hcHAvYWktbnMvYWktbnMucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZUFBQTtBQ0NKOztBRENBO0VBQ0ksNEJBQUE7QUNFSjs7QURBQTtFQUNJLDRCQUFBO0VBQ0EsK0JBQUE7RUFDQSxrQkFBQTtFQUNBLGNBQUE7QUNHSjs7QURGSTtFQUNBLGFBQUE7QUNJSjs7QURBQTtFQUNJLDJCQUFBO0FDR0o7O0FERkk7RUFDSSxxQ0FBQTtFQUNBLHFCQUFBO0VBQ0EseUJBQUE7RUFDQSxrQkFBQTtBQ0lSOztBREhRO0VBQ0ksNkJBQUE7QUNLWjs7QURIUTtFQUNJLHVCQUFBO0VBQ0EsZ0JBQUE7RUFDQSwwQkFBQTtBQ0taOztBRERBO0VBQ0ksMEJBQUE7QUNJSjs7QURGQTtFQUNJLGlCQUFBO0FDS0o7O0FERkE7RUFDSSxrQkFBQTtBQ0tKOztBREZBO0VBQ0ksWUFBQTtBQ0tKOztBREZBO0VBQ0ksMEJBQUE7QUNLSjs7QURGQTtFQUNJLGNBQUE7QUNLSjs7QURIQTtFQUNRLGVBQUE7QUNNUjs7QURKQTtFQUNJLDBCQUFBO0FDT0o7O0FESkE7RUFDSSxZQUFBO0VBQ0EsV0FBQTtBQ09KIiwiZmlsZSI6InNyYy9hcHAvYWktbnMvYWktbnMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLXRpdGxle1xyXG4gICAgZm9udC1zaXplOiAxNXB4O1xyXG59XHJcbmlvbi10b29sYmFye1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVzbW9rZTtcclxufVxyXG5pb24tY29udGVudHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XHJcbiAgICAtLW9mZnNldC1ib3R0b206IGF1dG8haW1wb3J0YW50O1xyXG4gICAgLS1vdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgb3ZlcmZsb3c6IGF1dG87XHJcbiAgICAmOjotd2Via2l0LXNjcm9sbGJhciB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG59XHJcblxyXG4ubGluZS1pbnB1dCB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAwIWltcG9ydGFudDtcclxuICAgIGlvbi1pdGVtIHtcclxuICAgICAgICAtLWJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQhaW1wb3J0YW50O1xyXG4gICAgICAgIC0taGlnaGxpZ2h0LWhlaWdodDogMDtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGVkZWRlO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgICAgICAmLml0ZW0taGFzLWZvY3VzIHtcclxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgZ3JlZW55ZWxsb3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlvbi1sYWJlbCB7XHJcbiAgICAgICAgICAgIGNvbG9yOiBibGFjayFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweCFpbXBvcnRhbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmlvbi1pbnB1dHtcclxuICAgIGZvbnQtc2l6ZTogMTJweCFpbXBvcnRhbnQ7XHJcbn1cclxuaW9uLWxhYmVsIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5pb24tY2FyZC1zdWJ0aXRsZXtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuaW9uLWl0ZW17XHJcbiAgICBoZWlnaHQ6IDU1cHg7XHJcbn1cclxuXHJcbmlvbi1sYWJlbCNmYXJtLXR5cGV7XHJcbiAgICBmb250LXNpemU6IDEzcHghaW1wb3J0YW50O1xyXG59XHJcblxyXG5pb24tbGFiZWx7XHJcbiAgICBmb250LXNpemU6IDlweDtcclxufVxyXG5pb24tc2VsZWN0Lm93bmVyLXR5cGV7XHJcbiAgICAgICAgZm9udC1zaXplOiAxM3B4OyAvL3NldHMgcGxhY2Vob2xkZXIgZm9udCBzaXplXHJcbn1cclxuaW9uLWxhYmVsI2xie1xyXG4gICAgZm9udC1zaXplOiAxMnB4IWltcG9ydGFudDtcclxufVxyXG5cclxuLmljb24tc2l6ZXtcclxuICAgIGhlaWdodDogMjVweDtcclxuICAgIHdpZHRoOiAyNXB4O1xyXG59XHJcblxyXG4iLCJpb24tdGl0bGUge1xuICBmb250LXNpemU6IDE1cHg7XG59XG5cbmlvbi10b29sYmFyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVzbW9rZTtcbn1cblxuaW9uLWNvbnRlbnQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlO1xuICAtLW9mZnNldC1ib3R0b206IGF1dG8haW1wb3J0YW50O1xuICAtLW92ZXJmbG93OiBoaWRkZW47XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuaW9uLWNvbnRlbnQ6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmxpbmUtaW5wdXQge1xuICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7XG59XG4ubGluZS1pbnB1dCBpb24taXRlbSB7XG4gIC0tYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCFpbXBvcnRhbnQ7XG4gIC0taGlnaGxpZ2h0LWhlaWdodDogMDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2RlZGVkZTtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xufVxuLmxpbmUtaW5wdXQgaW9uLWl0ZW0uaXRlbS1oYXMtZm9jdXMge1xuICBib3JkZXI6IDFweCBzb2xpZCBncmVlbnllbGxvdztcbn1cbi5saW5lLWlucHV0IGlvbi1pdGVtIGlvbi1sYWJlbCB7XG4gIGNvbG9yOiBibGFjayAhaW1wb3J0YW50O1xuICBmb250LXdlaWdodDogMzAwO1xuICBmb250LXNpemU6IDEycHggIWltcG9ydGFudDtcbn1cblxuaW9uLWlucHV0IHtcbiAgZm9udC1zaXplOiAxMnB4ICFpbXBvcnRhbnQ7XG59XG5cbmlvbi1sYWJlbCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG5pb24tY2FyZC1zdWJ0aXRsZSB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuaW9uLWl0ZW0ge1xuICBoZWlnaHQ6IDU1cHg7XG59XG5cbmlvbi1sYWJlbCNmYXJtLXR5cGUge1xuICBmb250LXNpemU6IDEzcHggIWltcG9ydGFudDtcbn1cblxuaW9uLWxhYmVsIHtcbiAgZm9udC1zaXplOiA5cHg7XG59XG5cbmlvbi1zZWxlY3Qub3duZXItdHlwZSB7XG4gIGZvbnQtc2l6ZTogMTNweDtcbn1cblxuaW9uLWxhYmVsI2xiIHtcbiAgZm9udC1zaXplOiAxMnB4ICFpbXBvcnRhbnQ7XG59XG5cbi5pY29uLXNpemUge1xuICBoZWlnaHQ6IDI1cHg7XG4gIHdpZHRoOiAyNXB4O1xufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { ApiService } from '../services/api.service';\nimport { Router } from '@angular/router';\nimport { Storage } from '@ionic/storage';\nimport { AlertController } from '@ionic/angular';\nimport { AinsDetails } from '../model/ains-details';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder, NativeGeocoderOptions, NativeGeocoderResult } from '@ionic-native/native-geocoder/ngx';\nimport { BreedingStatus } from '../model/breeding-status';\nimport { CalveRegistration } from '../model/calve-registration';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-ai-ns',\n  templateUrl: './ai-ns.page.html',\n  styleUrls: ['./ai-ns.page.scss'],\n})\n\n\nexport class AiNsPage implements OnInit {\n  pipe = new DatePipe('en-US');\n  currentUser: string;\n  semenTypeList: Array<String>;\n  exoticList: Object;\n  breedTypeList: Object;\n  villageList: Object;\n  aiCenterDesc: string;\n  aiCenterId: number;\n  technicianTypeList: Array<String>;\n  breedingStatusList: Array<string>;\n  pdStatusList: Array<string>;\n  eventTypeList: Array<string>;\n  assistedTypeList: Array<string>;\n\n  segment = 0;\n  segment1 = 0;\n\n  ownerdetails: boolean = true;\n  animadetails: boolean = false;\n  pedigreeinformation: boolean = false;\n\n  model: BreedingStatus;\n  modelAiNs: AinsDetails;\n\n  numberOfAi: number;\n  //List of variables used for AI type breeding \n  animalBreedType: String;\n  HideAiDetails: boolean = true;\n  showAiDetails: boolean = false;\n  showNsdetails: boolean = false;\n\n  //variable used to show status update and hide status update\n  statusSave: boolean = true;\n  statusUpdate: boolean = false;\n\n  //Event type variable\n  normal: boolean = false;\n  assist: boolean = false;\n  birth: boolean = false;\n  abortion: boolean = false;\n  showCalfRegeistration: boolean = false;\n\n  //List of variable to get details of owner, pedegree information, and animal details\n  cid_number: string;\n  nlhd_Number: string;\n  owner_name: string;\n  owner_village: string;\n  owner_gewog: string;\n  owner_dzongkhag: string;\n  animalTagNumber: string = \"\";\n  damNumber: string;\n  damExotic: number;\n  damName: string;\n  sireNumber: String;\n  sireName: String;\n  sireExotic: number;\n  housing_type_option: String;\n  animalname: String;\n  mobile_number: String;\n  animalAge: number;\n  migration: String;\n  migrationRegion: String;\n  sex: string;\n  category: string;\n  bcs: number;\n  damBreedId: number;\n  damBreed: String;\n  sireBreedId: number;\n  sireBreed: String;\n  selfExotic:number;\n  selfBreedId: number;\n  selfBreedType: string;\n  CHBPP: String;\n\n  //Lidt of variables to get information about Animal artificial insemination\n  semenType: string;\n  dateOfAi: Date;\n  techniqueName: string;\n  bullNumber: string;\n  bullName: string;\n  bullExotic: number;\n  bullType: string;\n  bullTypeId: number;\n  technicianName: string;\n  aiCenter: string;\n  technicianType: string;\n  gewog: string;\n  gewogId: number;\n  village: string;\n  longitude: number;\n  latitude: number;\n  altitude: number;\n  numberOfAiDone: number;\n\n  //List of variables to post the AI details of animals\n  p_semenType: string;\n  p_dateOfAi: Date;\n  p_bullNumber: string;\n  p_bullName: string;\n  p_bullExotic: number;\n  P_bullTypeId: number;\n  p_technicianName: string;\n  p_technique: string = \"AI\";\n  p_technicianType: string;\n  p_gewogId: number;\n  p_village: string;\n  p_altitude: number;\n\n  //List of the varailes to post the NS details of animals\n  N_Date: Date;\n  N_BullNumber: string;\n  N_BullName: string;\n  N_BullExotic: number;\n  N_BullTypeId: number;\n  N_TechniqueType: string = \"NS\";\n\n  //List of varaible to get animal breeding status;\n  breedingStatus: string;\n  pdStatus: string = null;\n  pdStausdate: Date;\n\n  //List of variable for Calve registration\n  clave_registration_no: string;\n  calve_name: string;\n  calf_birth_date: Date;\n  calve_age: number;\n  calve_sex: string;\n  calf_breed_type: number;\n  calf_exotic: number;\n\n  // // Readable Address\n  address: string;\n\n  geoLatitude: number;\n  geoLongitude: number;\n  geoAltitude: number;\n\n  ai: boolean = true;\n  ns: boolean = false;\n\n  claveModel:CalveRegistration;\n\n  //Validation variable\n  successmessage: any;\n  errorMessage: any;\n\n\n  constructor(\n    private apiService: ApiService,\n    private storage: Storage,\n    private router: Router,\n    private alertCtrl: AlertController,\n    private geolocation: Geolocation,\n    private nativeGeocoder: NativeGeocoder\n  ) {\n    this.modelAiNs = new AinsDetails();\n    this.model = new BreedingStatus();\n    this.claveModel = new CalveRegistration();\n  }\n\n  ngOnInit() {\n    this.getBreedType();\n    this.optionsForSelect();\n    this.getExoticBloodPercent();\n    this.getUserLocationWhileLoggingIn();\n  }\n\n  showValidDate(p_dateOfAi){\n    var currentDate = this.pipe.transform( Date.now(), 'yyyy-MM-dd');\n    if(p_dateOfAi <= currentDate){\n      this.errorMessage = \"\";\n      return this.p_dateOfAi;\n    } else {\n      this.errorMessage = \"Please enter valid date\";\n    }\n  }\n\n\n  keyPressNumbers(event) {\n    var charCode = (event.which) ? event.which : event.keyCode;\n    // Only Numbers 0-9\n    if ((charCode < 48 || charCode > 57)) {\n      event.preventDefault();\n      this.fetchFarmerOrFarmNameAnimalPedigreeDetailsFromTagNumber();\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  //Getting user location while user is loggedin\n  getUserLocationWhileLoggingIn() {\n    this.currentUser = sessionStorage.getItem(\"presentUser\");\n    console.log(\"User name is:\", this.currentUser);\n\n    this.apiService.getUserLocation().subscribe(response => {\n      console.log(\"Response:\", response);\n      for (let i = 0; i < response.length; i++) {\n        if (this.currentUser === response[i].userName) {\n          this.gewog = response[i].user_location_name;\n          this.gewogId = response[i].user_location_id;\n          this.getAllVillagesList(this.gewogId);\n        }\n      }\n    })\n  }\n\n  optionsForSelect() {\n    this.semenTypeList =\n      [\n        \"Sex sorted Semen Inventory( Imported)\",\n        \"Conventional frozen Semen Inventory(Imported)\",\n        \"Progeny Tested Semen-Yusipang\"\n      ],\n      this.technicianTypeList =\n      [\n        \"Govt AIT\",\n        \"Community AIT\"\n      ],\n      this.breedingStatusList =\n      [\n        \"Repeated\",\n        \"Not Repeated\"\n      ],\n\n      this.pdStatusList =\n      [\n        \"Positive\",\n        \"Negative\"\n      ],\n      this.eventTypeList =\n      [\n        \"Normal\",\n        \"Assisted\",\n        \"Still birth\",\n        \"Abortion\"\n      ],\n\n      this.assistedTypeList =\n      [\n        \"Caesarean\",\n        \"Corrective Measure\"\n      ]\n\n  }\n\n\n  //To navigate between the tabs of owner details, animal details and pedigree ionformation\n  segmentChanged(event) {\n    if (this.segment == 0) {\n      this.ownerdetails = true;\n      this.animadetails = false;\n      this.pedigreeinformation = false;\n    } else if (this.segment == 1) {\n      this.ownerdetails = false;\n      this.animadetails = true;\n      this.pedigreeinformation = false;\n    } else {\n      this.ownerdetails = false;\n      this.animadetails = false;\n      this.pedigreeinformation = true;\n    }\n\n  }\n\n  //To navigate between the tab of the AI and NS\n  segmentChangedBreedingMethod(event) {\n    if (this.segment1 == 0) {\n      this.ai = true;\n      this.ns = false;\n    } else {\n      this.ai = false;\n      this.ns = true;\n    }\n  }\n\n\n\n  //Fetch farmer or farm name, animal details and pedigree information by animal tagg number\n  fetchFarmerOrFarmNameAnimalPedigreeDetailsFromTagNumber() {\n    this.apiService.fetchFarmerOrFarmNameAnimalPedigreeDetailsFromTagNumber().subscribe(response => {\n      for (let i = 0; i < response.length; i++) {\n        if (this.animalTagNumber === response[i].animalTagNumber) {\n          this.cid_number = response[i].cid_number;\n          this.nlhd_Number = response[i].nlhd_Number;\n          this.owner_name = response[i].farmOrFarmerName;\n          this.owner_village = response[i].village;\n          this.owner_gewog = response[i].gewog;\n          this.owner_dzongkhag = response[i].dzongkhag;\n          this.mobile_number = response[i].mobileNumber;\n          this.animalname = response[i].animalName;\n          this.animalAge = response[i].animalAge;\n          this.sex = response[i].animalSex;\n          this.category = response[i].animalCategory;\n          this.CHBPP = response[i].chbpp;\n          this.migration = response[i].migration;\n          this.migrationRegion = response[i].migrationRegion;\n          this.bcs = response[i].bcs;\n          this.housing_type_option = response[i].housingType;\n          this.damNumber = response[i].damNumber;\n          this.damName = response[i].damName;\n          this.damExotic = response[i].damExotic;\n          this.damBreed = response[i].damBreedJoin.breedType;\n          this.sireNumber = response[i].sireNumber;\n          this.sireName = response[i].sireName;\n          this.sireExotic = response[i].sireExotic;\n          this.sireBreed = response[i].sireBreedJoin.breedType;\n          this.selfExotic = response[i].exotic_Blood_Percent;\n          this.selfBreedType = response[i].selfBreedType.breedType;\n          this.selfBreedId = response[i].selfBreedType.breedId;\n          this.getArtificialInseminationDetailsById();\n          this.getAnimalBreedingStatus();\n          break;\n        } else {\n          \n          // this.errorMessage = \"Please provide valid animal tag number\";\n          // this.alerFailed();\n        }\n      }\n    });\n  }\n\n  //get all animal breeding Status\n  getAnimalBreedingStatus() {\n    this.apiService.getAmimalBreedingStatus().subscribe((response) => {\n      for (let i = 0; i < response.length; i++) {\n        if (this.animalTagNumber === response[i].animal_Tag_Number && this.pdStatus === response[i].pd_Status) {\n          this.statusSave = true;\n          this.statusUpdate = false;\n          break;\n        } else if (this.animalTagNumber === response[i].animal_Tag_Number && response[i].pd_Status != \"\") {\n          this.statusSave = false;\n          this.statusUpdate = true;\n          this.breedingStatus = response[i].breeding_Status;\n          this.pdStatus = response[i].pd_Status;\n          this.pdStausdate = response[i].pd_Status_Date;\n          break;\n        } else {\n          this.statusSave = false;\n          this.statusUpdate = false;\n        }\n      }\n    });\n  }\n\n  //get artificial insemination details by id\n  getArtificialInseminationDetailsById() {\n    this.apiService.getArtificialInseminationDetails().subscribe((response) => {\n      for (let i = 0; i < response.length; i++) {\n        if (this.animalTagNumber === response[i].animal_Tag_Number && this.p_technique === response[i].technique_Name) {\n          this.semenType = response[i].semen_Type;\n          this.dateOfAi = response[i].date_Of_Event;\n          this.bullNumber = response[i].bull_Number;\n          this.bullName = response[i].bull_Name;\n          this.bullExotic = response[i].bull_Exotic;\n          this.bullType = response[i].breed.breedType;\n          this.bullTypeId = response[i].breed.breedId;\n          this.technicianName = response[i].technician_Name;\n          this.aiCenter = response[i].aicenter.ai_Center_Desc;\n          this.technicianType = response[i].ai_Technician_Type;\n          this.longitude = response[i].longitude;\n          this.latitude = response[i].latitude;\n          this.altitude = this.longitude + this.latitude;\n          this.HideAiDetails = false;\n          this.showAiDetails = true;\n          this.showNsdetails = false;\n          break;\n        } else if (this.animalTagNumber === response[i].animal_Tag_Number && this.N_TechniqueType === response[i].technique_Name) {\n          this.dateOfAi = response[i].date_Of_Event;\n          this.bullNumber = response[i].bull_Number;\n          this.bullName = response[i].bull_Name;\n          this.bullExotic = response[i].bull_Exotic;\n          this.bullType = response[i].breed.breedType;\n          this.bullTypeId = response[i].breed.breedId;\n          this.technicianType = response[i].ai_Technician_Type;\n          this.HideAiDetails = false;\n          this.showAiDetails = false;\n          this.showNsdetails = true;\n          break;\n        } else {\n          this.HideAiDetails = true;\n          this.showAiDetails = false;\n          this.showNsdetails = false;\n        }\n      }\n    });\n  }\n\n  //Update Ai Details\n  async updateAi() {\n    if (this.animalTagNumber != null) {\n      this.storage.set(\"taggNumber\", this.animalTagNumber);\n      this.router.navigate(['ai-update']);\n    } else {\n      this.failedAlert();\n    }\n  }\n\n  //Update animal breeding status\n  async breedinStatusUpdate() {\n    if (this.animalTagNumber != null) {\n      this.storage.set(\"taggNumber\", this.animalTagNumber);\n      this.router.navigate(['update-breeding-status']);\n    } else {\n      this.failedAlert();\n    }\n  }\n\n  //Update breedingg status if pd status is null\n  updateBreedingStatusWhenPdstausIsNull() {\n    this.apiService.updateBreedingStatus(this.animalTagNumber, this.model).subscribe(response => {\n      this.alertBreedingStatusSuccess();\n    })\n  }\n\n  //get exotic blood percent of dam and sire\n  getExoticBloodPercent() {\n    this.apiService.getExoticBloodPercent().subscribe((response) => {\n      this.exoticList = response;\n    });\n  }\n\n  //get all breed type\n  getBreedType() {\n    this.apiService.getBreedType().subscribe((response) => {\n      this.breedTypeList = response;\n    });\n  }\n\n  //get all village\n  getAllVillagesList(gewogId) {\n    this.apiService.getVillageListFromGewogLookup(gewogId).subscribe((response) => {\n      this.villageList = response.villageJoin;\n      this.aiCenterDesc = response.aiCenterJoin[0].ai_Center_Desc;\n      this.aiCenterId = response.aiCenterJoin[0].ai_Center_Id;\n    });\n  }\n\n\n  // //Geocoder configuration\n  geoencoderOptions: NativeGeocoderOptions = {\n    useLocale: true,\n    maxResults: 5\n  };\n\n  //Get current coordinates of device\n  getGeoLocation() {\n    this.geolocation.getCurrentPosition().then((position) => {\n      this.geoLatitude = position.coords.latitude;\n      this.geoLongitude = position.coords.longitude;\n      this.geoAltitude = position.coords.altitude;\n      this.getGeoencoder(position.coords.latitude, position.coords.longitude);\n    });\n  }\n\n  //geocoder method to fetch address from coordinates passed as arguments\n  getGeoencoder(geoLatitude, geoLongitude) {\n    this.nativeGeocoder.reverseGeocode(geoLatitude, geoLongitude, this.geoencoderOptions)\n      .then((result: NativeGeocoderResult[]) => {\n        this.address = this.generateAddress(result[0]);\n      })\n      .catch((error: any) => {\n        console.log('Error getting location' + JSON.stringify(error));\n      });\n  }\n\n\n  //Return Comma saperated address\n  generateAddress(addressObj) {\n    let obj = [];\n    let address = \"\";\n    for (let key in addressObj) {\n      obj.push(addressObj[key]);\n    }\n    obj.reverse();\n    for (let val in obj) {\n      if (obj[val].length)\n        address += obj[val] + ', ';\n    }\n    return address.slice(0, -2);\n  }\n\n  //Save AI type breeding for animals\n  saveAiTypeBreeding() {\n    this.modelAiNs.animal_Tag_Number = this.animalTagNumber;\n    this.modelAiNs.semen_Type = this.p_semenType;\n    this.modelAiNs.ai_Technician_Type = this.p_technicianType;\n    this.modelAiNs.technique_Name = this.p_technique;\n    this.modelAiNs.date_Of_Event = this.p_dateOfAi;\n    this.modelAiNs.bull_Number = this.p_bullNumber;\n    this.modelAiNs.bull_Name = this.p_bullName;\n    this.modelAiNs.bull_Exotic = this.p_bullExotic;\n    this.modelAiNs.bull_Breed_Type_Id = this.P_bullTypeId;\n    this.modelAiNs.technician_Name = this.p_technicianName;\n    this.modelAiNs.ai_Center_Id = this.aiCenterId;\n    this.modelAiNs.user_Gewog_Id = this.gewogId;\n    this.modelAiNs.latitude = this.geoLatitude;\n    this.modelAiNs.longitude = this.geoLongitude;\n    this.modelAiNs.altitude = this.p_altitude;\n\n    if(this.animalTagNumber != \"\" && this.p_semenType != \"\" && this.p_technique != \"\" && this.p_dateOfAi != null &&\n    this.p_bullNumber != \"\" && this.p_bullExotic != 0 && this.P_bullTypeId != 0 && this.p_technicianName != \"\" && \n    this.aiCenterId != 0 && this.gewogId != 0){\n\n      this.apiService.saveAiAndNSTypeBreeding(this.modelAiNs).subscribe((response) => {\n        this.alertSaveSuccesss();\n      });\n\n    } else {\n      this.errorMessage = \"Please fill all the required field\";\n      this.alerFailed();\n    }\n    \n  }\n\n\n  //Save NS type breeding for animals\n  saveNsTypeBreeding() {\n\n    this.modelAiNs.animal_Tag_Number = this.animalTagNumber;\n    this.modelAiNs.technique_Name = this.N_TechniqueType;\n    this.modelAiNs.date_Of_Event = this.N_Date;\n    this.modelAiNs.bull_Number = this.N_BullNumber;\n    this.modelAiNs.bull_Name = this.N_BullName;\n    this.modelAiNs.bull_Exotic = this.N_BullExotic;\n    this.modelAiNs.bull_Breed_Type_Id = this.N_BullTypeId;\n\n    if(this.animalTagNumber != \"\" && this.N_TechniqueType != \"\" && this.N_Date != null && this.N_BullNumber != \"\" &&\n    this.N_BullName != \"\" && this.N_BullExotic != 0 && this.N_BullTypeId != 0){\n      this.apiService.saveAiAndNSTypeBreeding(this.modelAiNs).subscribe((response) => {\n        this.alertSaveSuccesss();\n      })\n    } else {\n      this.errorMessage = \"Please provide all the required values\";\n      this.alerFailed();\n    }\n  }\n\n  //Selecting event type for animal\n  eventType($event) {\n    var item = $event.detail.value;\n    if (item === \"Normal\") {\n      this.normal = true;\n      this.assist = false;\n      this.birth = false;\n      this.abortion = false;\n    } else if (item === \"Assisted\") {\n      this.normal = false;\n      this.assist = true;\n      this.birth = false;\n      this.abortion = false;\n    } else if (item === \"Still birth\") {\n      this.normal = false;\n      this.assist = false;\n      this.birth = true;\n      this.abortion = false;\n    } else {\n      this.normal = false;\n      this.assist = false;\n      this.birth = false;\n      this.abortion = true;\n    }\n  }\n\n  //normal event update\n  updateEvent(eventType) {\n    if (this.animalTagNumber != \"\" && (eventType === \"Normal\" || eventType === \"Assisted\")) {\n      this.apiService.eventUpdate(this.animalTagNumber, this.modelAiNs).subscribe(response => {\n        this.evntUpdateSuccesss();\n        this.calf_exotic = (this.selfExotic+this.bullExotic)/2 \n        this.showCalfRegeistration = true;\n      });\n    } else if (this.animalTagNumber != \"\" && (eventType === \"Still birth\" || eventType === \"Abortion\")) {\n      this.apiService.eventUpdate(this.animalTagNumber, this.modelAiNs).subscribe(response => {\n        this.evntUpdateSuccesss();\n        this.showCalfRegeistration = false;\n      });\n    } else {\n      this.showCalfRegeistration = false;\n    }\n  }\n\n//Register new calve\n  registerCalveDetails(){\n    debugger;\n    this.claveModel.animalRegistrationNumber = this.clave_registration_no;\n    this.claveModel.cid_number = this.cid_number;\n    this.claveModel.nlhd_Number = this.nlhd_Number;\n    this.claveModel.owner_name = this.owner_name;\n    this.claveModel.owner_village = this.owner_village;\n    this.claveModel.owner_gewog = this.owner_gewog;\n    this.claveModel.owner_dzongkhag = this.owner_dzongkhag;\n    this.claveModel.damNumber = this.animalTagNumber;\n    this.claveModel.damExotic = this.selfExotic;\n    this.claveModel.damName = this.animalname;\n    this.claveModel.sireNumber = this.bullNumber;\n    this.claveModel.sireName = this.bullName;\n    this.claveModel.sireExotic = this.bullExotic;\n    this.claveModel.housing_type_option = this.housing_type_option = \"\";\n    this.claveModel.animalname = this.calve_name;\n    this.claveModel.mobile_number = this.mobile_number;\n    this.claveModel.birthdate = this.calf_birth_date;\n    this.claveModel.animalAge = this.calve_age;\n    this.claveModel.migration = this.migration = \"\";\n    this.claveModel.migrationRegion = this.migrationRegion = \"\";\n    this.claveModel.sex = this.calve_sex;\n    this.claveModel.category = this.category = \"Calve\";\n    this.claveModel.bcs = this.bcs = 0;\n    this.claveModel.damBreedId = this.selfBreedId;\n    this.claveModel.sireBreedId = this.bullTypeId;\n    this.claveModel.CHBPP = this.CHBPP = \"\";\n    this.claveModel.animalBreedType = this.calf_breed_type;;\n    this.claveModel.animalExotic = this.calf_exotic;\n\n    if(this.clave_registration_no != \"\" && this.calve_sex != \"\" && this.calf_birth_date != null){\n      this.apiService.registerCalveDetails(this.claveModel).subscribe((response) => {\n        //console.log(\"Saved successfully\");\n        this.successmessage = \"Calve registred successfully\";\n        this.alerSuccessful();\n      });\n    } else {\n      this.errorMessage = \"Please provide all the required details\";\n    }\n  }\n\n  // ********************all alert message here****************\n  //Failed alert\n  async failedAlert() {\n    const alert = await this.alertCtrl.create({\n      header: 'Failed',\n      message: \"Please provide animal tag number\",\n      buttons: [\n        {\n          text: 'Ok'\n        }\n      ]\n    });\n    await alert.present();\n  }\n\n  //Alert Controller to show animal details saving\n  async alertSaveSuccesss() {\n    const alert = await this.alertCtrl.create({\n      message: 'Animal sucessfully saved for AI: ',\n      buttons: ['OK']\n    });\n    await alert.present();\n    const result = await alert.onDidDismiss();\n    console.log(result);\n  }\n\n  //Show alert for successful breeding status update\n  async alertBreedingStatusSuccess() {\n    const alert = await this.alertCtrl.create({\n      message: 'Status saved successfully ',\n      buttons: ['OK']\n    });\n    await alert.present();\n    const result = await alert.onDidDismiss();\n    console.log(result);\n  }\n\n  //Alert Controller to show animal details saving\n  async evntUpdateSuccesss() {\n    const alert = await this.alertCtrl.create({\n      message: 'Successfull updated event',\n      buttons: ['OK']\n    });\n    await alert.present();\n    const result = await alert.onDidDismiss();\n    console.log(result);\n  }\n\n  //Alert Controller to show sussess\nasync alerSuccessful() {\n  const alert = await this.alertCtrl.create({\n    message: this.successmessage ,\n    buttons: ['OK']\n  });\n  await alert.present();\n  const result = await alert.onDidDismiss();\n  console.log(result);\n}\n\nasync alerFailed() {\n  const alert = await this.alertCtrl.create({\n    message: this.errorMessage,\n    buttons: ['OK']\n  });\n  await alert.present();\n  const result = await alert.onDidDismiss();\n  console.log(result);\n}\n\n\n\nlogout() {\n  this.router.navigate(['home']);\n  sessionStorage.clear();\n}\n\n}\n\n\n\n\n\n\n","export class CalveRegistration {\n    animalRegistrationNumber:String;\n    cid_number:string;\n    nlhd_Number:string;\n    owner_name:string;\n    owner_village:string;\n    owner_gewog:string;\n    owner_dzongkhag:string;\n    damNumber:String;\n    damExotic:number;\n    damName:String;\n    sireNumber:String;\n    sireName:String;\n    sireExotic:number;\n    housing_type_option:String;\n    animalname:String;\n    mobile_number:String;\n    birthdate:Date;\n    animalAge:number;\n    migration:String;\n    migrationRegion:String;\n    sex:string;\n    category:string;\n    bcs:number;\n    damBreed:string;\n    damBreedId:number;\n    sireBreed:string;\n    sireBreedId:number;\n    CHBPP:String;\n    animalBreedType:number;\n    animalExotic:number;\n}\n"]}